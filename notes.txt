per ray
	start at plr
	do
		find cell wall collision
		check for wall existence
	until
		find a wall that exists
		or exceeded render distance
		
	RL walls
		for n=0; until wall or exceed rend dist; n++
			find raydist
				current cell pos = plr.pos - (int)plr.pos
				R wall cos(theta) pos
					x length = 1-cellX + N
					rdist = xlen / cos(theta)
					rdist = (1-cellX + N) / cos(theta)
					rdist = (1 +  1*N - cellX) / cos(theta)
				L wall cos(theta) neg
					x length =   cellX + N
					cos(theta) = -xlen / rdist
					rdist = -xlen / cos(theta)
					rdist = -(cellX + N) / cos(theta)
					rdist = (0 + -1*N - cellX) / cos(theta)
				combine
					rdist =
						(
							(N + 0.5) * sgn(cos(theta)) //SIGN! -1 or 1
							+ 0.5 - cellX
						)
						/ cos(theta)
			detect collision
				which map grid to check?
					map[y][x]
						R wall
							x = (int)plrX + (N+1)
							y = 
								sin(theta) = ypart / rdist
								ypart = rdist * sin(theta)
								y = (int)(plrY + ypart)
								y = (int)(plrY + rdist * sin(theta))
						L wall
							x = (int)plrX - (N+1)
							y = (int)(plrY + rdist * sin(theta))
						combine
							x = (int)plrX + (N+1) * sgn(cos(theta)) //SIGN!
							y = (int)(plrY + rdist * sin(theta))